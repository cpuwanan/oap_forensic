{"version":3,"sources":["data/Dummy.js","components/MatUISingleLineGridList.js","pages/db_childrens/FirstInputTab.js","pages/db_childrens/SecondInputTab.js","pages/db_childrens/ResultTab.js","pages/Dashboard.js","pages/Profile.js","pages/admin_childrens/ItemViewer.js","pages/Settings.js","pages/Admin.js","pages/app_childrens/WelcomeModal.js","config/index.js","data/Mockup.js","App.js","serviceWorker.js","index.js"],"names":["RADIOACTIVE_PROPERTIES","matter","name","img","LAB_NAMES","POLICIES","code","security","safety","law","contact","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","title","color","primary","light","titleBar","SimpleSingleLineGridList","item_array","N","customStyle","className","GridList","cols","length","map","item","GridListTile","key","src","process","alt","App","props","toggleTab","id","allItems","state","property","open","setState","data","items","paramName","tabId","isDesktopSize","columnSize","prop","this","onClick","icon","size","inputs","isOpen","style","height","onUpdate","active","window","innerWidth","lg","md","sm","width","parseInt","renderItems","radioactiveItems","React","Component","index","obj","renderInputParam","label","value","renderOutputs","outputs","success","msg","fluid","scientificName","labChart","guideline","SUBMIT_BTN_NAMES","onSubmitStepperButton","e","target","btn","activePaneId","onSelectStepperPane","undefined","updateOutputs","userSteps","steps","userInputs","calculateOutputs","onUpdateInputs","console","log","onClickClearSelection","sockdt","openMenuBar","bind","code0","code1","code2","code3","result","find","activeItem","role","disabled","ACTION_LISTS","history","time","Date","toLocaleDateString","action","userAccount","type","toLowerCase","username","small","striped","firstname","lastname","department","position","toLocaleTimeString","toggleCollapse","toggleDeleteItem","deleteItemRequested","selectedItem","isCollapsable","renderHeaderLabel","toggle","MODAL_ACTIONS","onSelectTab","activeTabId","onSelectItem","proceed","toggleModal","modalAction","object_image","file","chart_image","usage","matterId","currentItem","submitNewItem","setMatterIdToTempItem","uploadImageToTempItem","preventDefault","param","files","imageList","push","URL","createObjectURL","itemSections","hover","borderStyle","appearance","labs","imageArray","ACTION_TYPE","ACCOUNT_TYPE","toggleActiveTab","response","toggleActiveUserType","activeUserType","onChangeInput","userInfo","onSubmitUser","myUsername","myPassword","password","submit","visitorFirstname","visitorLastname","visitorDepartment","visitorPosition","visitorUsername","visitorPassword","onChange","NETWORKING","ip","backendPort","KEYS","TEMP_RADIOACTIVE_ITEMS","changePage","currentMenuId","toggleDrawer","onLogout","menuItems","initWebsocket","submitUserAccount","url","socket","socketIOClient","on","fontSize","Drawer","anchor","onClose","renderMenuBar","renderHeader","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac29f7a7.chunk.js","sourcesContent":["export const RADIOACTIVE_PROPERTIES = {\n  matter: [\n    { name: \"ของแข็ง\", img: \"/accessories/solid_matter.png\"},\n    { name: \"ของเหลว\", img: \"/accessories/liquid_matter.png\" },\n    { name: \"ผง\", img: \"/accessories/gas_matter.png\" }\n  ],\n};\n\nexport const LAB_NAMES = [\n  \"Gamma Spec\", \"ICPMS\", \"XRD\", \"XRF\", \"Handheld Identifier\"\n]\n\n// 10, 10, 2, 1\nexport const POLICIES = [\n  { code: \"1111\", security: \"security 1\", safety: \"safety 1\", law: \"law 1\", contact: \"tel: 1\" },\n  { code: \"1110\", security: \"security 2\", safety: \"safety 2\", law: \"law 2\", contact: \"tel: 2\" },\n  { code: \"1101\", security: \"security 3\", safety: \"safety 3\", law: \"law 3\", contact: \"tel: 3\" },\n  { code: \"1011\", security: \"security 4\", safety: \"safety 4\", law: \"law 4\", contact: \"tel: 4\" },\n  { code: \"0111\", security: \"security 5\", safety: \"safety 5\", law: \"law 5\", contact: \"tel: 5\" },\n  { code: \"1100\", security: \"security 6\", safety: \"safety 6\", law: \"law 6\", contact: \"tel: 6\" },\n  { code: \"1001\", security: \"security 7\", safety: \"safety 7\", law: \"law 7\", contact: \"tel: 7\" },\n  { code: \"0011\", security: \"security 8\", safety: \"safety 8\", law: \"law 8\", contact: \"tel: 8\" },\n  { code: \"0110\", security: \"security 9\", safety: \"safety 9\", law: \"law 9\", contact: \"tel: 9\" },\n  { code: \"1000\", security: \"security 10\", safety: \"safety 10\", law: \"law 10\", contact: \"tel: 10\" },\n  { code: \"0001\", security: \"security 11\", safety: \"safety 11\", law: \"law 11\", contact: \"tel: 11\" },\n  { code: \"0010\", security: \"security 12\", safety: \"safety 12\", law: \"law 12\", contact: \"tel: 12\" },\n  { code: \"0100\", security: \"security 13\", safety: \"safety 13\", law: \"law 13\", contact: \"tel: 13\" },\n]","import React from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)',\n  },\n  title: {\n    color: theme.palette.primary.light,\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n  },\n}));\n\nconst SingleLineGridList = ({item_array}) => {\n  const customStyle = useStyles();\n\n  return(\n    <div className={customStyle.root}>\n      <GridList className={customStyle.gridList} cols={2}>\n        {\n          item_array.map(item => (\n            <GridListTile key={item.img}>\n              <img src={item.img} alt={item.title} />\n              <GridListTileBar \n                title={item.title}\n              />\n            </GridListTile>\n          ))\n        }\n      </GridList>\n    </div>\n  );\n\n}\n\nconst SimpleSingleLineGridList = ({item_array, N = 1}) => {\n  const customStyle = useStyles();\n\n  return(\n    <div className={customStyle.root}>\n      <GridList className={customStyle.gridList} cols={N}>\n        {\n          item_array.length > 0 &&\n          item_array.map(item => (\n            <GridListTile key={item}>\n              <img src={process.env.PUBLIC_URL + item} alt={item} />\n            </GridListTile>\n          ))\n        }\n      </GridList>\n    </div>\n  );\n\n}\n\nexport { SingleLineGridList, SimpleSingleLineGridList }","import React from 'react';\nimport { \n  MDBContainer, MDBListGroupItem, MDBRow, MDBCol, MDBCardHeader, MDBCardBody, MDBCollapse, MDBIcon, MDBBadge, MDBBtnGroup, MDBBtn\n} from 'mdbreact';\n\nimport { RADIOACTIVE_PROPERTIES } from '../../data/Dummy';\nimport { SimpleSingleLineGridList } from \"../../components/MatUISingleLineGridList\";\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      property: [\n        { open: true, name: \"matter\", data: RADIOACTIVE_PROPERTIES.matter, title: \"ขั้นที่ 1.1: ค้นหาข้อมูลด้วยลักษณะทางกายภาพ\" },\n        { open: true, name: \"scientificName\", data: [], title: \"ขั้นที่ 1.2: ค้นหาข้อมูลด้วยชื่อนิวไคลด์กัมมันตรังสี\" }\n      ],\n    }\n  }\n\n  componentDidMount() {\n  }\n\n  toggleTab = (id) => () => {\n    let allItems = this.state.property;\n    if (allItems[id]) {\n      allItems[id].open = !this.state.property[id].open;\n      this.setState({ property: allItems })\n    }\n  }\n\n  renderItems(items, paramName, tabId, isDesktopSize, columnSize) {\n    let prop = this.state.property[tabId];\n    if (!prop || items[paramName]) {\n      return <></>\n    }\n\n    return(\n      <section className=\"mb-3\">\n        <a onClick={this.toggleTab(tabId)}>\n          <MDBRow>\n            <MDBCol>\n              <h6 className={prop.open ? \"text-primary\" : \"\"}>\n                <MDBIcon icon={prop.open ? \"folder-open\" : \"folder\"} className=\"mr-2\" />\n                {prop.title}  \n              </h6>\n            </MDBCol>\n            <MDBCol size={isDesktopSize ? \"3\" : \"12\"} className={isDesktopSize ? \"text-right\" : \"\"}>\n            { \n              this.props.inputs[prop.name] && \n              <h6>                      \n                <MDBBadge color=\"primary\">{this.props.inputs[prop.name]}</MDBBadge>\n              </h6>\n            }\n            </MDBCol>\n          </MDBRow>\n        </a>\n        <MDBCollapse isOpen={prop.open}>\n          <MDBRow>\n            {\n              items.map(item => (\n                <MDBCol size={columnSize} className=\"mb-2\">\n                  <MDBListGroupItem\n                    style={{ height: \"100%\"}}\n                    onClick={this.props.onUpdate(prop.name, item.name)}\n                    active={this.props.inputs[prop.name] === item.name}\n                    className={this.props.inputs[prop.name] === item.name ? \"z-depth-2\" : \"\"}\n                  >\n                  <h5>\n                    {item.name}\n                  </h5>\n                  <SimpleSingleLineGridList \n                    item_array={item[paramName]}\n                  />\n                  </MDBListGroupItem>\n                </MDBCol>\n              ))\n            }\n          </MDBRow>\n        </MDBCollapse>\n      </section>\n    );\n  }\n\n  render() {\n    let columnSize = 4;\n    let isDesktopSize = true;\n    if (window.innerWidth < 800) {\n      columnSize = 12;\n      isDesktopSize = false;\n    }\n\n    let prop = this.state.property && this.state.property.length > 0 ? this.state.property[0] : null;\n    let index = 0;\n\n    return(\n      <MDBContainer>\n        {\n          prop &&\n            <section className=\"mb-3\">\n              <a onClick={this.toggleTab(index)}>\n                <MDBRow>\n                  <MDBCol>\n                    <h6 className={prop.open ? \"text-primary\" : \"\"}>\n                      <MDBIcon icon={prop.open ? \"folder-open\" : \"folder\"} className=\"mr-2\" />\n                      {prop.title}  \n                    </h6>\n                  </MDBCol>\n                  <MDBCol size={isDesktopSize ? \"3\" : \"12\"} className={isDesktopSize ? \"text-right\" : \"\"}>\n                    { \n                      this.props.inputs[prop.name] && \n                      <h6>                      \n                        <MDBBadge color=\"primary\">{this.props.inputs[prop.name]}</MDBBadge>\n                      </h6>\n                    }\n                  </MDBCol>\n                </MDBRow>\n              </a>\n              <MDBCollapse isOpen={prop.open}>\n                <MDBRow>\n                  {\n                    prop.data.map(item => (\n                      <MDBCol lg=\"4\" md=\"4\" sm=\"12\" className=\"mb-2\">\n                        <MDBListGroupItem\n                          style={{ height: \"100%\"}}\n                          onClick={this.props.onUpdate(prop.name, item.name)}\n                          active={this.props.inputs[prop.name] === item.name}\n                          className={this.props.inputs[prop.name] === item.name ? \"z-depth-2\" : \"\"}\n                          >\n                          <h5>\n                            {item.name}\n                          </h5>\n                          <section>\n                            <img src={process.env.PUBLIC_URL + item.img} alt={`rad-obj-${item.name}`} width=\"100%\" />\n                          </section> \n                        </MDBListGroupItem>\n                      </MDBCol>\n                    ))\n                  }\n                </MDBRow>\n              </MDBCollapse>\n              {\n                index < parseInt(this.state.property.length) - 1 &&\n                <hr />\n              }\n            </section>\n        }     \n        {\n          this.renderItems(this.props.radioactiveItems, \"appearance\", 1, isDesktopSize, columnSize)\n        }   \n      </MDBContainer>\n    );\n  }\n}","import React from 'react';\nimport { \n  MDBContainer, MDBListGroupItem, MDBRow, MDBCol, MDBCardHeader, MDBCardBody, MDBCollapse, MDBIcon, MDBBadge,\n} from 'mdbreact';\n\nimport { SimpleSingleLineGridList } from \"../../components/MatUISingleLineGridList\";\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      property: [\n        { open: true, name: \"labChart\", data: [], title: \"ขั้นที่ 2.1: ค้นหาข้อมูลจากการวิเคราะห์จากห้องปฏิบัติการ\" },\n        { open: true, name: \"guideline\", data: [], title: \"ขั้นที่ 2.2: ค้นหาข้อมูลด้วยลักษณะภายนอก หรือ การใช้ประโยชน์ \" }\n      ],\n    }\n  }\n\n  componentDidMount() {\n  }\n\n  toggleTab = (id) => () => {\n    let allItems = this.state.property;\n    if (allItems[id]) {\n      allItems[id].open = !this.state.property[id].open;\n      this.setState({ property: allItems })\n    }\n  }\n\n  renderItems(items, paramName, tabId, isDesktopSize, columnSize) {\n    let prop = this.state.property[tabId];\n    if (!prop || items[paramName]) { return <></>; }\n    if (!items) { return <></>; }\n    let item = items[0]\n    if (!item) { return <></>; }\n\n    return(\n      <section className=\"mb-3\">\n        <a onClick={this.toggleTab(tabId)}>\n          <MDBRow>\n            <MDBCol>\n              <h6 className={prop.open ? \"text-primary\" : \"\"}>\n                <MDBIcon icon={prop.open ? \"folder-open\" : \"folder\"} className=\"mr-2\" />\n                {prop.title}  \n              </h6>\n            </MDBCol>\n            <MDBCol size={isDesktopSize ? \"3\" : \"12\"} className={isDesktopSize ? \"text-right\" : \"\"}>\n            { \n              this.props.inputs[prop.name] && \n              <h6>                      \n                <MDBBadge color=\"primary\">{this.props.inputs[prop.name]}</MDBBadge>\n              </h6>\n            }\n            </MDBCol>\n          </MDBRow>\n        </a>\n        <MDBCollapse isOpen={prop.open}>\n          <MDBRow>\n            {\n              items.map((item, index) => (\n                index === 0 &&\n                item[paramName].map(obj => (\n                  <MDBCol size={columnSize} className=\"mb-2\">\n                    <MDBListGroupItem\n                      style={{ height: \"100%\"}}\n                      onClick={this.props.onUpdate(prop.name, obj)}\n                      active={this.props.inputs[prop.name] === obj}\n                      className={this.props.inputs[prop.name] === obj ? \"z-depth-2\" : \"\"}\n                    >\n                    <img src={process.env.PUBLIC_URL + obj} width=\"100%\" alt={obj} />\n                    </MDBListGroupItem>\n                  </MDBCol>\n                ))\n              ))\n            }\n          </MDBRow>\n        </MDBCollapse>\n      </section>\n    );\n  }\n\n  render() {\n    let columnSize = 4;\n    let isDesktopSize = true;\n    if (window.innerWidth < 800) {\n      columnSize = 12;\n      isDesktopSize = false;\n    }\n    \n    return(\n      <MDBContainer >\n        {\n          this.renderItems(this.props.radioactiveItems, \"labs\", 0, isDesktopSize, columnSize)\n        }  \n        {\n          this.renderItems(this.props.radioactiveItems, \"usage\", 1, isDesktopSize, columnSize)\n        }  \n      </MDBContainer>\n    );\n  }\n}\n","import React from 'react';\nimport { \n  MDBContainer, MDBListGroup, MDBListGroupItem, MDBRow, MDBCol, MDBTabPane, MDBTable, MDBTableBody, MDBBtnGroup,\n} from 'mdbreact';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n\n  componentDidMount() {}\n\n  renderInputParam = (label, value) => {\n    return (\n    <MDBListGroupItem \n      // style={ { backgroundColor: value ? \"#00C851\" : \"#ff4444\" } }\n      color={ value ? \"\" : \"dark\"}\n    >\n      {label}\n      <section className={ value ? \"text-success\" : \"text-danger\" }>\n        { value ? value : \"Not available\" }\n      </section>\n    </MDBListGroupItem>\n    );\n  }\n\n  renderOutputs = (outputs) => {\n    if (outputs) {\n      if (outputs.success) {\n        return (\n          <MDBListGroup>\n            <MDBListGroupItem>\n              <label className=\"\">ด้านความมั่นคง</label>\n              <br />\n              <label className=\"text-primary\">{outputs.security}</label>\n            </MDBListGroupItem>\n            <MDBListGroupItem>\n              <label className=\"\">ด้าน Safety</label>\n              <br />\n              <label className=\"text-primary\">{outputs.safety}</label>\n            </MDBListGroupItem>\n            <MDBListGroupItem>\n              <label className=\"\">ด้านกฎหมาย</label>\n              <br />\n              <label className=\"text-primary\">{outputs.law}</label>\n            </MDBListGroupItem>\n            <MDBListGroupItem>\n              <label className=\"\">การติดต่อประสานงาน</label>\n              <br />\n              <label className=\"text-primary\">{outputs.contact}</label>\n            </MDBListGroupItem>\n          </MDBListGroup>\n        );\n      } else {\n        return (\n          <MDBListGroupItem className=\"text-danger\">\n            <h5>{outputs.msg}</h5>\n            <label>{outputs.contact}</label>\n          </MDBListGroupItem>\n        );\n      }\n    } else {\n      return (\n        <MDBListGroupItem className=\"text-danger\">\n          <h5 className=\"font-weight-bold\">Invalid input data</h5>\n        </MDBListGroupItem>\n      ); \n    }\n  }\n\n  render() {\n    let columnSize = 12;\n    let isDesktopSize = true;\n    if (window.innerWidth < 800) {\n      columnSize = 12;\n      isDesktopSize = false;\n    }\n    \n    return(\n      <MDBContainer fluid>\n        <MDBRow>\n          <MDBCol size={12} className=\"mb-2\">\n            <section>\n              ลักษณะจำเพาะจากการประเมินของผู้ใช้\n            </section>\n            <MDBListGroup className=\"mt-2\">\n              { this.renderInputParam(\"Matter type\", this.props.inputs.matter) }\n              { this.renderInputParam(\"Scientific name\", this.props.inputs.scientificName) }\n              { this.renderInputParam(\"Lab data\", this.props.inputs.labChart) }\n              { this.renderInputParam(\"Guideline\", this.props.inputs.guideline) }\n            </MDBListGroup>\n          </MDBCol>\n        </MDBRow>\n        <hr />\n        <MDBRow>\n          <MDBCol size={12} className=\"mb-2\">\n            <section>\n              จากข้อมูลการค้นข้อมูลทั้ง 2 ขั้น ให้แสดงผลข้อมูลดังนี้\n            </section>\n            <section className=\"mt-2\">\n              { this.renderOutputs(this.props.outputs) }\n            </section>\n          </MDBCol>\n        </MDBRow>\n        <MDBRow>\n          <MDBCol>\n\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    );\n  }\n}","import React from 'react'\nimport { \n  MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBCardText,\n  MDBTable, MDBTableBody, MDBBtn, MDBInput, MDBCardFooter, MDBListGroupItem, MDBBtnGroup,\n  MDBTabContent, MDBTabPane, MDBIcon\n} from 'mdbreact';\n\nimport FirstInputTab from './db_childrens/FirstInputTab'\nimport SecondInputTab from './db_childrens/SecondInputTab'\nimport ResultTab from './db_childrens/ResultTab'\n\nimport { \n  POLICIES\n} from '../data/Dummy';\n\nconst SUBMIT_BTN_NAMES = {\n  next: \"next_step_btn\",\n  previous: \"prev_step_btn\"\n};\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      sockdt: null,\n      activePaneId: 0,\n      userSteps: [\n        { id: 0, name: \"Step 1\", success: false},\n        { id: 1, name: \"Step 2\", success: false},\n        { id: 2, name: \"Result\", success: false }\n      ],\n      userInputs: {\n        scientificName: null,\n        matter: null,\n        labChart: null,\n        guideline: null\n      },\n      outputs: null,\n      openMenuBar: false\n    }\n    this.onSelectStepperPane = this.onSelectStepperPane.bind(this);\n    this.onSubmitStepperButton = this.onSubmitStepperButton.bind(this);\n    this.onUpdateInputs = this.onUpdateInputs.bind(this);\n  }\n\n  onSubmitStepperButton = (e) => {\n    if (e.target) {\n      let btn=e.target.id;\n      let id = this.state.activePaneId;\n      if (btn === SUBMIT_BTN_NAMES.previous) {\n        id -= 1;\n      } else if (btn === SUBMIT_BTN_NAMES.next) {\n        id += 1;\n      }\n      this.setState({\n        activePaneId: id\n      })\n    }\n  }\n\n  onSelectStepperPane = (e) => {\n    if (e.target) {\n      let id = e.target.id;\n      if (id !== null || id !== undefined) {\n        if (parseInt(id) !== this.state.activePaneId) {\n          this.setState({\n            activePaneId: parseInt(id)\n          })\n        }\n      }\n    }\n  }\n\n  updateOutputs = () => {\n    if (!this.state.userSteps) { return; }\n\n    // Step 1\n    let steps = this.state.userSteps;\n    steps[0].success = false;\n    if (this.state.userInputs.matter && this.state.userInputs.scientificName) {\n      steps[0].success = true;\n    }\n\n    // Step 2\n    steps[1].success = false;\n    if (this.state.userInputs.labChart && this.state.userInputs.guideline) {\n      steps[1].success = true;\n    }\n\n    this.setState({\n      userSteps: steps,\n      outputs: this.calculateOutputs(this.state.userInputs)\n    })\n  }\n\n  onUpdateInputs = (property, value) => () => {\n    console.log(property, value)\n    if (property) {\n      if (this.state.userInputs[property] === value) {\n        // Clear selection if repeat clicking\n        value = null;\n      }\n      this.setState({\n        userInputs: {\n          ...this.state.userInputs,\n          [property]: value\n        }\n      } , () => {\n        this.updateOutputs();\n      })\n    }\n  }\n\n  onClickClearSelection = () => {\n    if (parseInt(this.state.activePaneId) === 0) {\n      this.setState({\n        userInputs: {\n          ...this.state.userInputs,\n          matter: null,\n          scientificName: null\n        }\n      }, () => { this.updateOutputs() })\n    } else if (parseInt(this.state.activePaneId) === 1) {\n      this.setState({\n        userInputs: {\n          ...this.state.userInputs,\n          labChart: null,\n          guideline: null\n        }\n      }, () => { this.updateOutputs() })\n    } else {\n      this.setState({\n        userInputs: {\n          ...this.state.userInputs,\n          matter: null,\n          scientificName: null,\n          labChart: null,\n          guideline: null\n        }\n      }, () => { this.updateOutputs() })\n    }\n  }\n\n  calculateOutputs(inputs) {\n    let outputs = null;\n    if (inputs) {\n      outputs = {\n        security: null,\n        safety: null,\n        law: null,\n        contact: null,\n        msg: null,\n        success: false\n      }\n\n      if (inputs.matter || inputs.scientificName || inputs.labChart || inputs.guideline) {\n        let code0 = inputs.matter ? \"1\" : \"0\";\n        let code1 = inputs.scientificName ? \"1\" : \"0\";\n        let code2 = inputs.labChart ? \"1\" : \"0\";\n        let code3 = inputs.guideline ? \"1\" : \"0\";\n        let code = `${code0}${code1}${code2}${code3}`;\n        let result = POLICIES.find(item => {\n          return item.code === code;\n        })\n        if (result) {\n          outputs.success = true;\n          outputs.security = result.security;\n          outputs.safety = result.safety;\n          outputs.law = result.law;\n          outputs.contact = result.contact;\n        }\n      }\n      \n      if (outputs.success === false) {\n        outputs.msg = \"กรุณาประสานสำนักงานปรมาณูเพื่อสันติ\";\n        outputs.contact = \"Tel: 02-596-7600\";\n      }\n    }\n    return outputs;\n  }\n  \n  render() {\n    return(\n      <MDBContainer className=\"mb-4\">\n        <MDBRow>\n          <MDBCol className=\"text-center text-muted\">\n            <label className=\"text-primary\">OAP Forensic</label>: การดำเนินการโปรแกรมสนับสนุนการดำเนินการด้านนิติวิทยาศาสตร์ทางนิวเคลียร์\n          </MDBCol>\n        </MDBRow>\n        <MDBRow className=\"text-center mt-1\">\n          {\n            this.state.userSteps && this.state.userSteps.map(item => (\n            <MDBCol>\n              <a id={item.id}\n                className={item.id === this.state.activePaneId ? \"font-weight-bold\" : \"text-light\"}\n                onClick={this.onSelectStepperPane}\n              >\n                {item.name}\n              </a>\n              <section>\n                <label className={item.success ? \"text-success\" : \"text-light\"}>\n                  <MDBIcon size=\"2x\" icon={item.success ? \"check-circle\" : \"times-circle\"} />\n                </label>\n              </section>\n            </MDBCol>\n            ))\n          }\n        </MDBRow>\n        <MDBRow className=\"mt-2\">\n          <MDBCol>\n            <MDBCard>\n              <MDBCardBody>\n                <MDBCardText>\n                  <MDBTabContent activeItem={this.state.activePaneId}>\n                    <MDBTabPane tabId={0} role=\"tabpanel\">\n                      <FirstInputTab \n                        inputs={this.state.userInputs}\n                        onUpdate={this.onUpdateInputs}\n                        radioactiveItems={this.props.radioactiveItems}\n                      />\n                    </MDBTabPane>\n                    <MDBTabPane tabId={1} role=\"tabpanel\">\n                      <SecondInputTab \n                        inputs={this.state.userInputs}\n                        onUpdate={this.onUpdateInputs}\n                        radioactiveItems={this.props.radioactiveItems}\n                      />                      \n                    </MDBTabPane>\n                    <MDBTabPane tabId={2} role=\"tabpanel\">\n                      <ResultTab \n                        inputs={this.state.userInputs}\n                        outputs={this.state.outputs}\n                        radioactiveItems={this.props.radioactiveItems}\n                      />\n                    </MDBTabPane>\n                  </MDBTabContent>\n                </MDBCardText>\n              </MDBCardBody>\n              <MDBCardFooter>\n                <MDBRow>\n                {\n                  this.state.userSteps && this.state.userSteps.length > 0 && \n                  <MDBCol className=\"\">\n                    <MDBBtn \n                      color={parseInt(this.state.activePaneId) < 1 ? \"light\" : \"primary\"}\n                      disabled={parseInt(this.state.activePaneId) < 1}\n                      size=\"md\" id={SUBMIT_BTN_NAMES.previous}\n                      onClick={this.onSubmitStepperButton}\n                    >Previous</MDBBtn>\n                  </MDBCol>\n                }\n                <MDBCol className=\"text-center\">\n                  <MDBBtn size=\"md\" color=\"warning\"\n                    onClick={this.onClickClearSelection}\n                  >Clear</MDBBtn>\n                </MDBCol>\n                {\n                  this.state.userSteps && this.state.userSteps.length > 0 &&\n                  <MDBCol className=\"text-right\">\n                    <MDBBtn\n                      color={parseInt(this.state.activePaneId) === this.state.userSteps.length - 1 ? \"light\" : \"primary\"}\n                      disabled={parseInt(this.state.activePaneId) === this.state.userSteps.length - 1}\n                      size=\"md\" id={SUBMIT_BTN_NAMES.next}\n                      onClick={this.onSubmitStepperButton}\n                      >Next</MDBBtn>\n                    </MDBCol>\n                }\n                </MDBRow>\n              </MDBCardFooter>\n            </MDBCard>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    );\n  }\n}","import React from 'react'\nimport { \n  MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBCardText,\n  MDBTable, MDBTableBody, MDBListGroup, MDBListGroupItem, MDBCardHeader, MDBBtn, MDBBadge, MDBCardTitle, MDBTableHead\n} from 'mdbreact';\n\nconst ACTION_LISTS = [\"Log in\", \"Log out\", \"Added item\", \"Edit item\"]\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  componentDidMount() {\n    let history = [\n      { time: new Date().toLocaleDateString(), action: 0},\n      { time: new Date().toLocaleDateString(), action: 1},\n      { time: new Date().toLocaleDateString(), action: 2},\n      { time: new Date().toLocaleDateString(), action: 0},\n      { time: new Date().toLocaleDateString(), action: 3},\n    ]\n    this.setState({\n      history: history\n    })\n  }\n\n  render() {\n    return(\n      <MDBContainer fluid>\n        {\n          this.props.userAccount &&\n        \n        <MDBRow>\n          <MDBCol sm=\"12\" md=\"12\" lg=\"3\" className=\"mb-2\">\n            <MDBCard>\n              <MDBCardHeader color={this.props.userAccount.type.toLowerCase() === \"admin\" ? \"blue-gradient\" : \"peach-gradient\"}>\n                <MDBRow>\n                  <MDBCol><h5>{this.props.userAccount.username}</h5></MDBCol>\n                  <MDBCol className=\"text-right\"><MDBBadge color=\"primary\">{this.props.userAccount.type}</MDBBadge></MDBCol>\n                </MDBRow>\n              </MDBCardHeader>\n              <MDBCardBody>\n                <MDBCardText>\n                  <MDBRow>\n                    <MDBCol className=\"text-center\">\n                      <img src={process.env.PUBLIC_URL + \"/images/profile_template.jpg\"} width=\"80%\" alt=\"profile\" />\n                    </MDBCol>\n                  </MDBRow>\n                  <section className=\"m-2 text-center\">\n                    {this.props.userAccount.username}\n                  </section>\n                  <MDBTable small striped className=\"mt-2\">\n                    <MDBTableBody>\n                      <tr>\n                        <td>Fullname</td>\n                        <td className=\"text-primary\">\n                          {this.props.userAccount.firstname} {this.props.userAccount.lastname}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Department</td>\n                        <td className=\"text-primary\">\n                          {this.props.userAccount.department}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Position</td>\n                        <td className=\"text-primary\">\n                          {this.props.userAccount.position}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Authority</td>\n                        <td>\n                          <MDBBadge color=\"primary\">\n                            {this.props.userAccount.type}\n                          </MDBBadge>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Email</td>\n                        <td className=\"text-primary\">myname@email.com</td>\n                      </tr>\n                      <tr>\n                        <td>Tel</td>\n                        <td className=\"text-primary\">09809800112</td>\n                      </tr>\n                    </MDBTableBody>\n                  </MDBTable>\n                  <MDBRow>\n                    <MDBCol>\n                      <MDBBtn color=\"primary\" >Edit</MDBBtn>\n                    </MDBCol>\n                  </MDBRow>\n                </MDBCardText>\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n          <MDBCol>\n            <MDBCard>\n              <MDBCardHeader>\n                <a>\n                  <h5>Usage History</h5>\n                </a>\n              </MDBCardHeader>\n              <MDBCardBody>\n                <MDBCardText>\n                  <MDBTable small striped>\n                    <MDBTableHead>\n                      <tr>\n                        <td>Date</td>\n                        <td>Time</td>\n                        <td>Action</td>\n                      </tr>\n                    </MDBTableHead>\n                    <MDBTableBody>\n                      {\n                        this.state.history && this.state.history.map(item => (\n                          <tr>\n                            <td>{new Date(item.time).toLocaleDateString()}</td>\n                            <td>{new Date(item.time).toLocaleTimeString()}</td>\n                            <td>{ACTION_LISTS[parseInt(item.action)]}</td>\n                          </tr>\n                        ))\n                      }\n                    </MDBTableBody>\n                  </MDBTable>\n                </MDBCardText>\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n        </MDBRow>\n        \n        }\n      </MDBContainer>\n    );\n  }\n}","import React, { isValidElement } from 'react';\nimport { \n  MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBCardText,\n  MDBTable, MDBTableBody, MDBBtn, MDBIcon, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader,\n  MDBInput,\n  MDBListGroupItem, MDBDropdown, MDBDropdownItem, MDBDropdownMenu, MDBDropdownToggle,\n  MDBListGroup,\n  MDBCardHeader,\n  MDBCollapse\n} from 'mdbreact';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true,\n      deleteItemRequested: false,\n      selectedItem: null\n    }\n  }\n\n  toggleCollapse = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    })\n  }\n\n  toggleDeleteItem = (value, item = null) => () => {\n    if (this.state.deleteItemRequested !== value) {\n      this.setState({ \n        deleteItemRequested: value,\n        selectedItem: item ? item : this.state.selectedItem\n      })\n    }\n  }\n\n  renderHeaderLabel() {\n    return (<lable>\n      { this.props.title }\n      { this.props.items && <span className=\"ml-2\">({parseInt(this.props.items.length)} images)</span> }\n    </lable>);\n  }\n\n  render() {\n    return(\n      <section>\n        <MDBRow className=\"mb-2\">\n          <MDBCol>\n            {\n              this.props.isCollapsable \n              ? <a className={this.state.isOpen ? \"text-primary\" : \"\"}\n                  onClick={this.toggleCollapse}\n                >\n                  <span className=\"mr-2\"><MDBIcon icon={this.state.isOpen ? \"folder-open\" : \"folder\"} /></span>\n                  {this.renderHeaderLabel()}\n                </a>\n              : this.renderHeaderLabel()\n            }\n          </MDBCol>\n          <MDBCol className=\"text-right\" sm=\"2\" md=\"4\">\n            <MDBBtn size=\"sm\" color={this.state.isOpen ? \"primary\" : \"grey\"} disabled={!this.state.isOpen}>\n              <MDBIcon icon=\"plus\" className={this.props.isDesktopSize ? \"mr-2\" : \"\"} />\n              {\n                this.props.isDesktopSize && \"Add image\"\n              }\n            </MDBBtn>\n          </MDBCol>\n        </MDBRow>\n        {\n          this.props.items && this.props.items.length > 0 &&\n          <MDBCollapse isOpen={this.state.isOpen}>\n            <MDBRow>\n            {\n              this.props.items.map(obj => (\n                <MDBCol sm=\"12\" md=\"6\" lg=\"6\" className=\"mb-1\">\n                  <MDBListGroupItem style={{ height: \"100%\"}}>\n                    <MDBRow>\n                      <MDBCol className=\"text-right\">\n                        <a className=\"text-danger\" onClick={this.toggleDeleteItem(true, obj)}>\n                          <MDBIcon icon=\"trash-alt\" size=\"1x\" className={this.props.isDesktopSize ? \"mr-2\" : \"\"} />\n                          {\n                            this.props.isDesktopSize && \"Delete\"\n                          }\n                        </a>\n                      </MDBCol>\n                    </MDBRow>\n                    <img src={process.env.PUBLIC_URL + obj} alt={obj} width=\"100%\" />\n                  </MDBListGroupItem>\n                </MDBCol>\n              ))\n            }\n            </MDBRow>\n          </MDBCollapse>\n        }\n\n        <MDBModal isOpen={this.state.deleteItemRequested} toggle={this.toggleDeleteItem(false)}>\n          <MDBModalBody>\n            Do you want to remove this item <label className=\"text-danger\">{this.state.selectedItem}</label>\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn>Cancel</MDBBtn>\n            <MDBBtn>Confirm</MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </section>\n    );\n  }\n};","import React from 'react'\nimport { \n  MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBCardText,\n  MDBTable, MDBTableBody \n} from 'mdbreact';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    return(\n      <MDBContainer fluid>\n        <MDBRow>\n          <MDBCol>\n            <MDBCard className=\"m-1\">\n              <MDBCardBody>\n                <MDBCardText>\n                  <h5 className=\"font-weight-bold\">Settings</h5>\n                  \n                </MDBCardText>\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    );\n  }\n}","import React from 'react'\nimport { \n  MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBCardText,\n  MDBTable, MDBTableBody, MDBBtn, MDBIcon, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader,\n  MDBInput,\n  MDBListGroupItem, MDBDropdown, MDBDropdownItem, MDBDropdownMenu, MDBDropdownToggle,\n  MDBListGroup,\n  MDBCardHeader,\n  MDBTableHead,\n  MDBCardTitle,\n  MDBNav, MDBNavItem, MDBBtnGroup, MDBBtnToolbar, MDBTabContent, MDBTabPane\n} from 'mdbreact';\n\nimport { LAB_NAMES } from '../data/Dummy';\nimport { SimpleSingleLineGridList } from '../components/MatUISingleLineGridList';\nimport ItemViewer from './admin_childrens/ItemViewer';\n\nconst MODAL_ACTIONS = {\n  add: \"add_items\",\n  clear: \"clear\"\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalAction: null,\n      currentItem: null,\n      selectedItem: null,\n      itemSections: [\n        { name: \"Appearance\", icon: \"images\" },\n        { name: \"Lab\", icon: \"chart-line\" },\n        { name: \"Usage\", icon: \"book\" }\n      ],\n      activeTabId: 0,\n    }\n  }\n\n  componentDidMount() {\n  }\n\n  onSelectTab = (id) => ()　=> {\n    if (this.state.activeTabId !== id) {\n      this.setState({ activeTabId: parseInt(id)})\n    }\n  }\n\n  onSelectItem = (item) => () => {\n    if (item) {\n      let proceed = true;\n      if (this.state.selectedItem) {\n        if (this.state.selectedItem.name === item.name) {\n          proceed = false;\n        }\n      }\n      if (proceed) {\n        this.setState({ selectedItem: item })\n      } else {\n        this.setState({ selectedItem: null })\n      }\n    }\n  }\n\n  toggleModal = (action) => () => {\n    if (this.state.modalAction !== action) {\n      let item = null;\n      if (action === MODAL_ACTIONS.clear) {\n        item = null;\n      } else if (action === MODAL_ACTIONS.add) {\n        item = {\n          name: \"untitle\",\n          object_image: [\n            {img: \"/dummy/object_1.jpg\", file: \"/dummy/object_1.jpg\", title: \"image_1\"},\n          ],\n          chart_image: [\n            {img: \"/dummy/chart_1.png\", file: \"/dummy/chart_1.png\", title: \"image_1\"},\n          ],\n          usage: \"no data\",\n          matterId: 0,\n        }\n      }\n      this.setState({ \n        modalAction: action,\n        currentItem: item\n      })\n    }\n  }\n\n  submitNewItem = () => {\n    if (this.state.currentItem) {\n      // Send to backend\n\n      // Clear\n      this.setState({\n        modalAction: MODAL_ACTIONS.clear,\n        currentItem: null\n      })\n    }\n  }\n\n  setMatterIdToTempItem = (index) => () => {\n    if (this.state.currentItem) {\n      this.setState({\n        currentItem: {\n          ...this.state.currentItem,\n          matterId: parseInt(index)\n        }\n      })\n    }\n  }\n\n  uploadImageToTempItem = (e) => {\n    e.preventDefault()\n\n    if (!this.state.currentItem) { return; }\n\n    let param = e.target.name;\n    if (e.target.files && e.target.files[0] && this.state.currentItem[param]) {\n      let file = e.target.files[0];\n      console.log(e.target)\n      let imageList = this.state.currentItem[param];\n      imageList.push({ img: URL.createObjectURL(file), title: `${new Date().toLocaleDateString()}, ${new Date().toLocaleTimeString()}`, file: file })\n      this.setState({\n        currentItem: {\n          ...this.state.currentItem,\n          [param]: imageList\n        }\n      })\n    }\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n    console.log(\"OnFormSubmit \", e);\n  }\n\n  render() {\n    let columnSize = 4;\n    let isDesktopSize = true;\n    if (window.innerWidth < 800) {\n      columnSize = 12;\n      isDesktopSize = false;\n    }\n    return(\n      <MDBContainer fluid>\n        <MDBRow className=\"mt-2\">\n          <MDBCol lg=\"3\" sm=\"12\" className=\"mb-2\">\n            <h5 className=\"font-weight-bold\">List of all radioactive items</h5>\n            <MDBRow className=\"mt-2\">\n              <MDBCol>\n              {\n                this.props.radioactiveItems && this.props.radioactiveItems.length > 0 &&\n                this.props.radioactiveItems.map(item => (\n                    <MDBListGroupItem \n                      className={this.state.selectedItem && this.state.selectedItem.name === item.name ? \"z-depth-2\" : \"\"}\n                      active={this.state.selectedItem && this.state.selectedItem.name === item.name}\n                      onClick={this.onSelectItem(item)} >\n                      {item.name}\n                    </MDBListGroupItem>\n                ))\n              }\n              </MDBCol>\n            </MDBRow>\n          </MDBCol>\n          <MDBCol>\n            <section>\n              <MDBListGroupItem className=\"text-center z-depth-1\">\n                <MDBRow>\n                  {\n                    this.state.itemSections.map((item, index) => (\n                      <MDBCol size={ parseInt(12 / parseInt(this.state.itemSections.length)) }>\n                        <MDBListGroupItem hover style={{ borderStyle: \"none\"}}\n                          onClick={this.onSelectTab(index)}\n                          className={ this.state.selectedItem && parseInt(this.state.activeTabId) === index ? \"text-primary\" : \"text-light\"}\n                        >\n                          <MDBIcon icon={item.icon} size=\"2x\" />\n                        </MDBListGroupItem>\n                      </MDBCol>\n                    ))\n                  }\n                </MDBRow>\n              </MDBListGroupItem>\n            </section>\n\n            {\n              this.state.selectedItem &&\n              <MDBCard className=\"mt-2\">\n                <MDBCardBody>\n                  <MDBCardText>\n                    <section>\n                      <MDBInput type=\"text\" value={this.state.selectedItem.name} label=\"Scientific name\" />\n                    </section>\n                    <MDBTabContent activeItem={this.state.activeTabId}>\n                      <MDBTabPane tabId={0}>\n                        <ItemViewer \n                          title=\"Appearance\"\n                          isCollapsable={false}\n                          items={this.state.selectedItem.appearance}\n                          isDesktopSize={isDesktopSize}\n                        />\n                      </MDBTabPane>\n                      <MDBTabPane tabId={1}>\n                      {\n                        this.state.selectedItem.labs && LAB_NAMES &&\n                        parseInt(this.state.selectedItem.labs.length) === parseInt(LAB_NAMES.length) &&\n                        this.state.selectedItem.labs.map((imageArray, index) => (\n                          <>\n                            <ItemViewer \n                              title={LAB_NAMES[index]}\n                              isCollapsable={true}\n                              items={imageArray}\n                              isDesktopSize={isDesktopSize}\n                            />\n                            {\n                              index < parseInt(this.state.selectedItem.labs.length) - 1 && <hr />\n                            }\n                          </>\n                        ))\n                      }\n                      </MDBTabPane>\n                      <MDBTabPane tabId={2}>\n                        <ItemViewer \n                          title=\"Usage\"\n                          isCollapsable={false}\n                          items={this.state.selectedItem.usage}\n                          isDesktopSize={isDesktopSize}\n                        />\n                      </MDBTabPane>\n                    </MDBTabContent>\n                  </MDBCardText>\n                </MDBCardBody>\n              </MDBCard>\n            }\n          </MDBCol>\n        </MDBRow>\n\n{/*\n        <MDBModal isOpen={this.state.modalAction === MODAL_ACTIONS.add} toggle={this.toggleModal(MODAL_ACTIONS.clear)}>\n          <MDBModalBody>\n            {\n              this.state.currentItem &&\n              <MDBRow>\n                <MDBCol>\n                  <MDBInput type=\"text\" label=\"Scientific name\" value={this.state.currentItem.name} />\n                  <MDBInput type=\"text\" label=\"Usage\" value={this.state.currentItem.usage} />\n                  <section className=\"fotn-weight-bold\">ลักษณะทางกายภาพ</section>\n                  <section className=\"mb-2\">\n                    <MDBRow className=\"mb-2\">\n                      <MDBCol className=\"font-weight-bold\">\n                        Object\n                      </MDBCol>\n                      <MDBCol className=\"text-right\">\n                        <label htmlFor=\"upload_button1\" className=\"text-primary\"><MDBIcon icon=\"plus\" className=\"mr-2\" />Upload object</label>\n                        <input name=\"object_image\" type=\"file\" id=\"upload_button1\" style={{ display: \"none\"}} onChange={this.uploadImageToTempItem} />\n                      </MDBCol>\n                    </MDBRow>\n                    \n                    <MatUISingleLineGridList \n                      item_array={this.state.currentItem.object_image}\n                    />\n                    \n                  </section>\n                  \n                  <section className=\"mb-2\">\n                    <MDBRow className=\"mb-2\">\n                      <MDBCol className=\"font-weight-bold\">Lab data</MDBCol>\n                      <MDBCol className=\"text-right\">\n                        <label htmlFor=\"upload_button2\" className=\"text-primary\"><MDBIcon icon=\"plus\" className=\"mr-2\" />Upload chart</label>\n                        <input name=\"chart_image\" type=\"file\" id=\"upload_button2\" style={{ display: \"none\"}} onChange={this.uploadImageToTempItem} />\n                      </MDBCol>\n                    </MDBRow>\n                    <MatUISingleLineGridList \n                      item_array={this.state.currentItem.chart_image}\n                    />\n                  </section>\n                  \n                </MDBCol>\n              </MDBRow>\n            }\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBRow>\n              <MDBCol className=\"text-right\">\n                <MDBBtn onClick={this.toggleModal(MODAL_ACTIONS.clear)} color=\"primary\">Cancel</MDBBtn>\n                <MDBBtn onClick={this.submitNewItem} color=\"success\">Save</MDBBtn>\n              </MDBCol>\n            </MDBRow>\n          </MDBModalFooter>\n        </MDBModal>\n          */}\n      </MDBContainer>\n    );\n  }\n}","import React from 'react'\n\nimport {\n  MDBContainer, MDBRow, MDBCol, MDBModal, MDBModalBody, MDBModalFooter,\n  MDBListGroupItem, MDBBtn, MDBTabContent, MDBTabPane, MDBIcon, MDBModalHeader, MDBInput\n} from 'mdbreact';\n\nconst ACTION_TYPE = {\n  login: 0,\n  createAccount: 1\n};\n\nconst ACCOUNT_TYPE = {\n  admin: 0,\n  user: 1\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTabId: ACTION_TYPE.login,\n      activeUserType: ACCOUNT_TYPE.admin,\n      response: null,\n      userInfo: null,\n    }\n    this.toggleActiveTab = this.toggleActiveTab.bind(this);\n    this.toggleActiveUserType = this.toggleActiveUserType.bind(this);\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.onSubmitUser = this.onSubmitUser.bind(this);\n  }\n\n  toggleActiveTab = (id) => () => {\n    if (this.state.activeTabId !== parseInt(id)) {\n      this.setState({\n        activeTabId: parseInt(id),\n        response: null\n      })\n    }\n  }\n\n  toggleActiveUserType = (id) => () => {\n    if (this.state.activeUserType !== parseInt(id)) {\n      this.setState({\n        activeUserType: parseInt(id)\n      })\n    }\n  }\n\n  onChangeInput = (e) => {\n    if (e.target.id) {\n      let param = e.target.id;\n      let value = e.target.value;\n      this.setState({\n        userInfo: {\n          ...this.state.userInfo,\n          [param]: value\n        }\n      })\n    }\n  }\n\n  onSubmitUser = () => {\n    let response = null;\n    if (this.state.userInfo) {\n      if (parseInt(this.state.activeTabId) === ACTION_TYPE.login) {\n        console.log(\"Log in\")\n        if (this.state.userInfo.myUsername && this.state.userInfo.myPassword) {\n          let data = {\n            username: this.state.userInfo.myUsername,\n            password: this.state.userInfo.myPassword,\n            firstname: \"My admin\",\n            lastname: \"Forencis\",\n            type: parseInt(this.state.activeUserType) === ACCOUNT_TYPE.admin ? \"Admin\" : \"User\",\n            department: \"OAP\",\n            position: \"Manager\"\n          }\n          this.props.submit(data)\n        } else {\n          console.log(\"Error: invalid data\")\n        }\n      } else if (parseInt(this.state.activeTabId) === ACTION_TYPE.createAccount) {\n        console.log(\"Create an account\")\n        if (this.state.userInfo.visitorFirstname \n            && this.state.userInfo.visitorLastname\n            && this.state.userInfo.visitorDepartment\n            && this.state.userInfo.visitorPosition\n            && this.state.userInfo.visitorUsername\n            && this.state.userInfo.visitorPassword            \n        ) {\n          let data = {\n            username: this.state.userInfo.visitorUsername,\n            password: this.state.userInfo.visitorPassword,\n            firstname: this.state.userInfo.visitorFirstname,\n            lastname: this.state.userInfo.visitorLastname,\n            type: parseInt(this.state.activeUserType) === ACCOUNT_TYPE.admin ? \"Admin\" : \"User\",\n            department: this.state.userInfo.visitorDepartment,\n            position: this.state.userInfo.visitorPosition,\n          }\n          this.props.submit(data)\n        } else {\n          console.log(\"Error: invalid data\")\n        }\n      } else {\n        console.log(\"Invalid action\")\n        response = {\n          success: false,\n          msg: `Error: Invalid action: ${this.state.activeTabId}`\n        }\n      }\n    } else {\n      response = {\n        success: false,\n        msg: \"All fields should not be empty\"\n      }\n    }\n\n    if (response) {\n      this.setState({\n        response: response\n      })\n    }\n  }\n\n  render() {\n    return(\n      <MDBModal isOpen={!this.props.userAccount}>\n        <MDBModalHeader>\n          <MDBRow>\n            <MDBCol>\n              <img src={process.env.PUBLIC_URL + \"/images/oap_logo.jpg\"} width=\"40px\" className=\"mr-3\"/>Welcome to OAP Forensic\n            </MDBCol>\n          </MDBRow>\n        </MDBModalHeader>\n        <MDBModalBody>\n          <MDBRow className=\"text-center\">\n            <MDBCol>\n              <MDBListGroupItem hover onClick={this.toggleActiveTab(ACTION_TYPE.login)}\n                active={parseInt(this.state.activeTabId) === ACTION_TYPE.login}\n              >\n                <MDBIcon icon=\"user-check\" className=\"mr-2\"/>Log In\n              </MDBListGroupItem>\n            </MDBCol>\n            <MDBCol>\n              <MDBListGroupItem hover onClick={this.toggleActiveTab(ACTION_TYPE.createAccount)}\n                active={parseInt(this.state.activeTabId) === ACTION_TYPE.createAccount}\n              >\n                <MDBIcon icon=\"user-plus\" className=\"mr-2\"/>Create an account\n              </MDBListGroupItem>\n            </MDBCol>\n          </MDBRow>\n          <MDBRow className=\"mt-2\">\n            <MDBCol>\n              <MDBListGroupItem>\n                <MDBTabContent activeItem={this.state.activeTabId}>\n                  <MDBTabPane tabId={ACTION_TYPE.login}>\n                    <MDBRow>\n                      <MDBCol>\n                        <MDBInput id=\"myUsername\" onChange={this.onChangeInput}\n                          value={this.state.userInfo && this.state.userInfo.myUsername}\n                          size=\"sm\" type=\"text\" label=\"Username\" />\n                      </MDBCol>\n                      <MDBCol>\n                        <MDBInput id=\"myPassword\" onChange={this.onChangeInput}\n                          value={this.state.userInfo && this.state.userInfo.myPassword}\n                          size=\"sm\" type=\"password\" label=\"Password\" />\n                      </MDBCol>\n                    </MDBRow>\n                  </MDBTabPane>\n                  <MDBTabPane tabId={ACTION_TYPE.createAccount}>\n                    <MDBRow>\n                      <MDBCol>\n                        <MDBInput id=\"visitorFirstname\" onChange={this.onChangeInput}\n                          value={this.state.userInfo && this.state.userInfo.visitorFirstname}\n                          size=\"sm\" type=\"text\" label=\"Firstname\" />\n                      </MDBCol>\n                      <MDBCol>\n                        <MDBInput id=\"visitorLastname\" onChange={this.onChangeInput}\n                          value={this.state.userInfo && this.state.userInfo.visitorLastname}\n                          size=\"sm\" type=\"text\" label=\"Lastname\" />\n                      </MDBCol>\n                    </MDBRow>\n                    <MDBRow>\n                      <MDBCol>\n                        <MDBInput id=\"visitorDepartment\" onChange={this.onChangeInput}\n                          value={this.state.userInfo && this.state.userInfo.visitorDepartment}\n                          size=\"sm\" type=\"text\" label=\"Department\" />\n                      </MDBCol>\n                      <MDBCol>\n                        <MDBInput id=\"visitorPosition\" onChange={this.onChangeInput}\n                          value={this.state.userInfo && this.state.userInfo.visitorPosition}\n                          size=\"sm\" type=\"text\" label=\"Position\" />\n                      </MDBCol>\n                    </MDBRow>\n                    <MDBRow>\n                      <MDBCol>\n                        <MDBInput id=\"visitorUsername\" onChange={this.onChangeInput}\n                          value={this.state.userInfo && this.state.userInfo.visitorUsername}\n                          size=\"sm\" type=\"text\" label=\"Username\" />\n                      </MDBCol>\n                      <MDBCol>\n                        <MDBInput id=\"visitorPassword\" onChange={this.onChangeInput}\n                          value={this.state.userInfo && this.state.userInfo.visitorPassword}\n                          size=\"sm\" type=\"password\" label=\"Password\" />\n                      </MDBCol>\n                    </MDBRow>\n                  </MDBTabPane>\n                </MDBTabContent>\n                <MDBRow className=\"text-center\">\n                  <MDBCol>\n                    Please select account type\n                  </MDBCol>\n                  <MDBCol>\n                    <a onClick={this.toggleActiveUserType(ACCOUNT_TYPE.admin)}\n                      className={parseInt(this.state.activeUserType) === ACCOUNT_TYPE.admin ? \"text-primary font-weight-bold mr-2 ml-2\" : \"text-light mr-2 ml-2\"}\n                    >\n                      Admin\n                    </a>\n                    <a onClick={this.toggleActiveUserType(ACCOUNT_TYPE.user)}\n                      className={parseInt(this.state.activeUserType) === ACCOUNT_TYPE.user ? \"text-primary font-weight-bold mr-2 ml-2\" : \"text-light mr-2 ml-2\"}\n                    >\n                      User\n                    </a>\n                  </MDBCol>\n                </MDBRow>\n                {/*\n                  parseInt(this.state.activeTabId) === parseInt(ACTION_TYPE.createAccount) &&\n                  parseInt(this.state.activeUserType) === parseInt(ACCOUNT_TYPE.admin) &&\n                  <MDBRow>\n                    <MDBCol>\n                      <MDBInput size=\"sm\" type=\"password\" label=\"Authorize code\" />\n                    </MDBCol>\n                  </MDBRow>\n                */}\n              </MDBListGroupItem>\n            </MDBCol>\n          </MDBRow>\n        </MDBModalBody>\n        <MDBModalFooter>\n          {\n            this.state.response &&\n            <section className={this.state.response.success ? \"text-success\" : \"text-danger\"}>\n              {this.state.response.msg}\n            </section>\n          }\n          <MDBRow>\n            <MDBCol>\n              <MDBBtn color=\"primary\" onClick={this.onSubmitUser}>\n                {\n                  parseInt(this.state.activeTabId) === 0\n                  ? \"Log In\"\n                  : \"Create\"\n                }\n              </MDBBtn>\n            </MDBCol>\n          </MDBRow>\n        </MDBModalFooter>\n      </MDBModal>\n    );\n  }\n}","export const NETWORKING = {\n    ip: 'http://localhost',\n    backendPort: 4000\n};\n\nexport const KEYS = {\n    websocket: \"websocket_status\",\n    radioactive_data: \"radioactive_data\"\n}","export const TEMP_RADIOACTIVE_ITEMS = [\n  { \n    name: \"Ir-192\", \n    appearance: [\"/dummy/obj_ir_192/obj_1.png\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"Cs-137\", \n    appearance: [\"/dummy/obj_cs_137/obj_1.png\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"Co-60\", \n    appearance: [\"/dummy/obj_co_60/obj_1.jpg\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"Am-241\", \n    appearance: [\"/dummy/obj_am_241/obj_1.jpg\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"Plutonium\", \n    appearance: [\"/dummy/obj_plutonium/obj_1.jpg\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"Thorium\", \n    appearance: [\"/dummy/obj_thorium/obj_1.jpg\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"U-235\", \n    appearance: [\"/dummy/obj_u_235/obj_1.jpg\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"U-238\", \n    appearance: [\"/dummy/obj_u_238/obj_1.jpg\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.jpg\"], [\"/dummy/lab/lab3_1.jpg\"], [\"/dummy/lab/lab4_1.jpg\"], [\"/dummy/lab/lab5_1.jpg\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"Depleted Uranium\", \n    appearance: [\"/dummy/obj_uranium/obj_1.jpg\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n  { \n    name: \"Scrap metal\", \n    appearance: [\"/dummy/obj_metal/obj_1.jpg\"], \n    labs: [[\"/dummy/lab/lab1_1.jpg\"], [\"/dummy/lab/lab2_1.png\"], [\"/dummy/lab/lab3_1.png\"], [\"/dummy/lab/lab4_1.png\"], [\"/dummy/lab/lab5_1.png\"]],\n    usage: [\"/dummy/usage/usage_1.png\"]\n  },\n];","import React from 'react';\nimport {\n  MDBContainer, MDBRow, MDBCol, MDBModal, MDBModalBody, MDBBtn, MDBListGroupItem, MDBIcon, MDBCardBody, MDBInput,\n  MDBCard, MDBCardText, MDBTabContent, MDBTabPane, MDBBadge\n} from 'mdbreact';\nimport socketIOClient from 'socket.io-client';\n\nimport Drawer from '@material-ui/core/Drawer';\n\nimport Dashboard from './pages/Dashboard';\nimport Profile from './pages/Profile';\nimport Settings from './pages/Settings';\nimport Admin from './pages/Admin';\nimport WelcomeModal from './pages/app_childrens/WelcomeModal';\n\nimport { NETWORKING, KEYS } from './config/index';\nimport { TEMP_RADIOACTIVE_ITEMS } from './data/Mockup';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      openMenuBar: false,\n      menuItems: [ \n        {label: \"Dashboard\", icon: \"home\", id: 0},\n        {label: \"Profile\", icon: \"user-circle\", id: 1},\n        {label: \"Admin\", icon: \"user-lock\", id: 2}\n      ], \n      currentMenuId: 0,\n      radioactiveItems: [],\n      userAccount: null,\n    }\n    this.initWebsocket = this.initWebsocket.bind(this);\n    this.submitUserAccount = this.submitUserAccount.bind(this);\n  }\n\n  componentDidMount() {\n    if (NETWORKING) {\n      const url = `${NETWORKING.ip}:${NETWORKING.backendPort}`;\n      this.setState({\n        socket: socketIOClient(url)\n      } , () => {\n        if (this.state.socket) {\n          this.initWebsocket();\n        } else {\n          console.log(\"Websocket is not available\")\n        }\n      })\n    }\n  }\n\n  initWebsocket() {\n    this.state.socket.on(KEYS.websocket, data => {\n      console.log(data)\n    })\n\n    this.state.socket.on(KEYS.radioactive_data, data => {\n      this.setState({  \n        radioactiveItems: data\n      }, () => console.log(this.state.radioactiveItems))\n    })\n  }\n\n  changePage = (id) => () => {\n    if (this.state.currentMenuId !== parseInt(id)) {\n      this.setState({ currentMenuId: parseInt(id), openMenuBar: false })\n    }\n  }\n\n  toggleDrawer = (open) => () => {\n    this.setState({  openMenuBar: open })\n  };\n\n  submitUserAccount(data) {\n    if (data) {\n      console.log(data)\n      this.setState({\n        userAccount: data\n      })\n    }\n  }\n\n  onLogout = () => {\n    this.setState({\n      userAccount: null\n    })\n  }\n\n  renderHeader(isDesktopSize) {\n    let color = \"\";\n    if (this.state.userAccount) {\n      if (this.state.userAccount.type.toLowerCase() === \"admin\") {\n        color=\"info\"\n      } else {\n        color=\"\"\n      }\n    }\n    return(\n      <MDBListGroupItem className=\"z-depth-1\">\n        <MDBRow>\n          <MDBCol>\n            <a onClick={this.toggleDrawer(!this.state.openMenuBar)}>\n              <MDBIcon icon=\"bars\" size=\"2x\" className=\"mr-3\" />\n              {\n                isDesktopSize && <span style={{ fontSize: \"150%\"}}>OAP Forensic</span>\n              }\n            </a>\n          </MDBCol>\n          {\n            this.state.userAccount &&\n            <MDBCol className=\"text-center\">\n                Welcome <label className=\"text-primary\">{this.state.userAccount.username}</label>\n                {\n                  this.state.userAccount.type &&\n                  this.state.userAccount.type.toLowerCase() === \"admin\" &&\n                  <MDBBadge className=\"ml-2\" color=\"primary\">Admin</MDBBadge>\n                }\n            </MDBCol>\n          }\n          <MDBCol className=\"text-right\">\n            {\n              this.state.userAccount &&\n              <MDBBtn onClick={this.onLogout} className=\"ml-2\" size=\"sm\">Log Out</MDBBtn>\n            }\n          </MDBCol>\n        </MDBRow>\n      </MDBListGroupItem>\n    );\n  }\n\n  renderMenuBar(isDesktopSize) {\n    return(\n      <Drawer anchor={'left'} open={this.state.openMenuBar} onClose={this.toggleDrawer(false)}>\n        <div style={{ width: isDesktopSize ? \"300px\" : \"200px\"}}>\n          <section className=\"m-2\">\n            <section className=\"text-center\">\n              <img src={process.env.PUBLIC_URL + \"/images/oap_logo.jpg\"} alt=\"oap_francis\" width=\"40%\" />\n            </section>\n            <hr />\n            <MDBRow>\n              <MDBCol>\n                {\n                  this.state.menuItems.map((item, index) => (\n                    <a onClick={this.changePage(item.id)}>\n                    <MDBRow className=\"m-2\">\n                      <MDBCol className={this.state.currentMenuId === item.id ? \"font-weight-bold\" : \"text-light\"}>\n                        <MDBIcon icon={item.icon} className=\"mr-2\" />{item.label}\n                      </MDBCol>\n                    </MDBRow>\n                    {\n                      index < parseInt(this.state.menuItems.length) - 1 &&\n                      <hr /> \n                    }\n                    </a>\n                  ))\n                }\n              </MDBCol>\n            </MDBRow>\n          </section>\n        </div>\n      </Drawer>\n    );\n  }\n\n  render() {\n    let isDesktopSize = window.innerWidth > 800;\n\n    if (!this.state.radioactiveItems) {\n      this.setState({\n        radioactiveItems: TEMP_RADIOACTIVE_ITEMS\n      })\n    } else {\n      if (this.state.radioactiveItems.length === 0) {\n        this.setState({\n          radioactiveItems: TEMP_RADIOACTIVE_ITEMS\n        })\n      }\n    }\n\n    return(\n      <div>\n      { this.renderMenuBar(isDesktopSize) }\n      { this.renderHeader(isDesktopSize) }\n      <MDBContainer className=\"mt-3\">\n        <MDBTabContent activeItem={this.state.currentMenuId}>\n          <MDBTabPane tabId={0}>\n            <Dashboard \n              radioactiveItems={this.state.radioactiveItems}\n            />\n          </MDBTabPane>\n          <MDBTabPane tabId={1}>\n            <Profile \n              userAccount={this.state.userAccount}\n            />\n          </MDBTabPane>\n          <MDBTabPane tabId={2}>\n            <Admin\n              radioactiveItems={this.state.radioactiveItems}\n            />\n          </MDBTabPane>\n        </MDBTabContent>\n      </MDBContainer>\n\n      <WelcomeModal \n        userAccount={this.state.userAccount}\n        submit={this.submitUserAccount}\n      />\n\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}